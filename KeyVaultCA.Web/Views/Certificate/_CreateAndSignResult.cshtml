@model KeyVaultCA.Web.Models.SignResponse;

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<div class="form-row">
	<div class="input-data">
		@Html.TextAreaFor(x=>x.Pkcs7Result, new{@style="width:760px;height:370px;"})
		@* <input type="text" asp-for="@Model.Result" /> *@
	</div>
</div>
<div class="form-row submit-btn">
	<div class="input-data">
		<button class="btn " id="download-pfx">
			Download
			<i class="fa fa-download"></i>
		</button>
	</div>
</div>

<script type="text/javascript">
	$(function () {
		$('#download-pfx').on("click", function () {
			DownloadFile();
		});
	});

	async function DownloadFile() {
		var name = '@Model.Csr.CertificateName';
		var apiUrl = '@Url.Action("DownloadPfx", "Certificate", new{name=Model.Csr.CertificateName})';
		const response = await fetch(apiUrl);

		const blob = await response.blob();

		// Create a temporary anchor element to trigger the download
		const a = document.createElement('a');
		const url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = name + '.pfx';
		a.click();

		// Clean up
		window.URL.revokeObjectURL(url);
	}

</script>