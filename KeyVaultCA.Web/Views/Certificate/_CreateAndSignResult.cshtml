@model KeyVaultCA.Web.Models.SignResponse;

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<div id="counter-alert">
	<div class="input-data">
		Time remaining for download:
	</div>
</div>
<div id="counter-section" class="form-row">
	<div class="input-data">
	</div>
</div>
<div id="certificate-section">
	<div class="form-row">
		<div class="input-data">
			@Html.TextAreaFor(x=>x.Pkcs7Result, new{@style="width:760px;height:370px;"})
			@* <input type="text" asp-for="@Model.Result" /> *@
		</div>
	</div>
	<div class="form-row submit-btn">
		<div class="input-data">
			<button class="btn " id="download-pfx">
				Download
				<i class="fa fa-download"></i>
			</button>
		</div>
	</div>
</div>

<script type="text/javascript">
	$(function () {
		var counter = 5 * 60;
		var newElement = $('#counter-section')[0];
		// newElement.innerHTML = counter + " seconds.";
		var id;
		startTimer(counter, newElement, id);
		$('#download-pfx').on("click", function () {
			DownloadFile();
		});
	});

	function startTimer(counter, newElement, id) {
		id = setInterval(function () {
			let minutes = Math.floor(counter / 60);
			let seconds = counter % 60;
			if (counter < 0) {
				//visualization and download not allowed
				$("#certificate-section").hide();
				$("#counter-alert").hide();
				newElement.innerHTML = "Certificate no longer downloadable. Please generate another certificate.";
				clearInterval(id);
			}
			else {
				// update the counter
				newElement.innerHTML = + formatTime(minutes) + ':' + formatTime(seconds);
				// newElement.innerHTML = + counter.toString() + " seconds";
			}
			counter--;
		}, 1000);
	}

	function manageTime(seconds) {

	}

	function formatTime(time) {
		return (time < 10) ? '0' + time : time;
	}

	async function DownloadFile() {
		var name = '@Model.Csr.CertificateName';
		var apiUrl = '@Url.Action("DownloadPfx", "Certificate", new{name=Model.Csr.CertificateName})';
		const response = await fetch(apiUrl);

		const blob = await response.blob();

		// Create a temporary anchor element to trigger the download
		const a = document.createElement('a');
		const url = window.URL.createObjectURL(blob);
		a.href = url;
		a.download = name + '.pfx';
		a.click();

		// Clean up
		window.URL.revokeObjectURL(url);
	}

</script>